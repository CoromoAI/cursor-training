---
alwaysApply: false
---
# プルリクエスト作成手順自動化ガイド

このルールは、現在の変更差分をもとにブランチ作成からプルリクエスト作成までの手順を自動化するためのガイドです。

## 📋 実行手順

### 1. 現在の変更差分を確認
```bash
git status
```
- Untracked filesや変更されたファイルを確認
- 変更内容を把握してブランチ名とコミットメッセージを計画

### 2. 適切なブランチ名の決定と作成
```bash
git checkout -b [branch-name]
```

**ブランチ命名規則:**
- `feature/` + 機能の概要（英語）
- 例: `feature/add-training-cases`, `feature/update-documentation`
- 変更内容を簡潔に表現する

### 3. 全ての変更をコミット
```bash
git add .
git commit -m "[commit-message]"
```

**コミットメッセージ規則:**
- `feat:` 新機能追加
- `fix:` バグ修正
- `docs:` ドキュメント更新
- `refactor:` リファクタリング
- `style:` コードスタイル修正

**メッセージ構造:**
```
[type]: [概要（日本語可）]

- [詳細1]
- [詳細2]
- [詳細3]

[追加の説明や注意点]
```

### 4. リモートブランチへプッシュ
```bash
git push -u origin [branch-name]
```

### 5. プルリクエスト作成
GitHubのmcp_github_create_pull_request ツールを使用

**プルリクエストテンプレート:**
```markdown
## 📝 変更概要
[変更の概要を記述]

## 🎯 [変更カテゴリ]
### [サブカテゴリ1]
- **[項目1]**: [説明]
- **[項目2]**: [説明]

### [サブカテゴリ2]
- **[項目3]**: [説明]

## 🛠️ 技術スタック
- **[技術1]**: [詳細]
- **[技術2]**: [詳細]

## 📋 実装されたベストプラクティス
- ✅ [項目1]
- ✅ [項目2]
- ✅ [項目3]

## 🔍 レビュー観点
- [ ] [確認項目1]
- [ ] [確認項目2]
- [ ] [確認項目3]
```

## 🚀 自動化用のプロンプト例

```
現在の差分をもとに以下の手順でpull requestを作成してください
1. branch切り替え: branch名は考えてください
2. 全ての変更をcommit。commit messageは差分をもとに考えてください。
3. pushとpull requestの作成。pull request作成時に簡単に変更点をまとめてください。
```

## 📝 注意事項

- ブランチ名は変更内容を適切に表現する
- コミットメッセージは詳細で分かりやすく
- プルリクエストの説明は構造化して読みやすく
- レビュー観点を含めてレビュアーをサポート
- 技術スタックやベストプラクティスを明記

## 🔄 一連の流れ

1. **変更確認** → 2. **ブランチ作成** → 3. **コミット** → 4. **プッシュ** → 5. **PR作成**

このガイドに従って、一貫性のあるプルリクエスト作成プロセスを自動化できます。